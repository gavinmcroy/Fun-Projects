/** REFERENCES */
//while (webfile >> s) {
//        if (s == "PAGE") {
//
//            /* Reset all the counters */
//            if (!first) {
//                pages.push_back(StoredWebPages::Webpage(url, numLinks, numWords,));
//            }
//            numLinks = 0;
//            numWords = 0;
//            /* Reset all the counters */
//            first = false;
//            webfile >> url;
//            numPages++;
//        } else if (s == "LINK") {
//            webfile >> hyperLink; /*(-THIS STRING NEEDS TO BE HASHED-) */
//            toBeHashed.push_back(hyperLink);
//            numLinks++;
//        } /* Regular Words */
//        else if (s != "LINK" && s != "PAGES") {
//            numWords++;
//        }
//    }


/*Reset File Read */
//    webfile.clear();
//    webfile.seekg(0);

/*  std::string text;
    int numPages;
    std::vector<int> pages; */

//    while (webfile >> readInValue) {
//        if (readInValue == "PAGE") {
//            /* This variable is helpful for grabbing the link index  */
//            webfile >> url;
//        } else if (readInValue == "LINK") {
//            /* Trash the link associated with page  */
//            webfile >> readInValue;
//        } else {
//            /* A lot is happening here. We are taking the index at which the page exists
//             * in the page structure. Then getting the index at which the word exists in the word structure.
//             * then we are accessing the index at which the word exists, adding the index at which the link exists
//             * to the word struct. Then while inside the word struct we are incrementing num pages to signify
//             * how many pages the word is on*/
//            int linkIndex = webPageIntMap[url];
//            int wordIndex = wordIntMap[readInValue];
//            words.at(wordIndex).pages.push_back(linkIndex);
//            words.at(wordIndex).numPages++;
//            //pagesThatContainWord.push_back(index);
//            /* This is all the words in the entire file */
//        }
//    }

/* DEBUG */
//    for (int i = 0; i < everyDistinctWordVec.at(myLookUp).pages.size(); i++) {
//        cout << everyDistinctWordVec.at(myLookUp).pages.at(i) << endl;
//    }


//    cout << pages.at(0).url << endl;
//    cout << pages.at(0).numLinks << endl;
//
//    cout << pages.at(0).words.size() << endl;
//    cout << pages.at(0).words.at(0) << endl;



/* TEST SEARCH
int myLookUp = wordIntMap["dabo"];
cout << everyDistinctWordVec.at(myLookUp).text << endl;
cout << "Total Pages " << everyDistinctWordVec.at(myLookUp).numPages << endl;

myLookUp = wordIntMap["football"];
cout << everyDistinctWordVec.at(myLookUp).text << endl;
cout << "Total Pages " << everyDistinctWordVec.at(myLookUp).numPages << endl;

myLookUp = wordIntMap["pancakes"];
cout << everyDistinctWordVec.at(myLookUp).text << endl;
cout << "Total Pages " << everyDistinctWordVec.at(myLookUp).numPages << endl;

myLookUp = wordIntMap["pancake"];
cout << everyDistinctWordVec.at(myLookUp).text << endl;
cout << "Total Pages " << everyDistinctWordVec.at(myLookUp).numPages << endl;
 TEST SEARCH */
/*
myLookUp = wordIntMap["pancake"];
cout << everyDistinctWordVec.at(myLookUp).text << endl;
int tmp = everyDistinctWordVec.at(myLookUp).pages.at(0);
cout << pages.at(tmp).weight << endl;
tmp = everyDistinctWordVec.at(myLookUp).pages.at(1);
cout << pages.at(tmp).weight << endl;
tmp = everyDistinctWordVec.at(myLookUp).pages.at(2);
cout << pages.at(tmp).weight << endl;
tmp = everyDistinctWordVec.at(myLookUp).pages.at(3);
cout << pages.at(tmp).weight << endl;
tmp = everyDistinctWordVec.at(myLookUp).pages.at(4);
cout << pages.at(tmp).weight << endl;
tmp = everyDistinctWordVec.at(myLookUp).pages.at(5);
cout << pages.at(tmp).weight << endl;
*/
/* DEBUG */
